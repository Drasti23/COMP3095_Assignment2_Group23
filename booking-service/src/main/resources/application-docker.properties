# Docker-specific properties
spring.application.name=booking-service
booking-service.version=v1.0

# Docker port for booking-service
server.port=9004

# MongoDB configuration for Docker (host should match the service name in docker-compose)
spring.data.mongodb.host=mongodb-booking
spring.data.mongodb.port=27017
spring.data.mongodb.database=booking-service
spring.data.mongodb.username=admin
spring.data.mongodb.password=password
spring.data.mongodb.authentication-database=admin


springdoc.swagger-ui.path=/swagger-ui

springdoc.api-docs.path=/api-docs


service.room.url=http://room-service:9001/api/rooms
service.room.availability.url=http://room-service:9001/api/rooms/availability


management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


# Circuit breaker settings


resilience4j.circuitbreaker.instances.roomServiceCircuitBreaker.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.roomServiceCircuitBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.roomServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.roomServiceCircuitBreaker.waitDurationInOpenState=10000
resilience4j.circuitbreaker.instances.roomServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=3

logging.level.io.github.resilience4j.circuitbreaker=DEBUG



# Kafka Properties
# The address of the Kafka broker
spring.kafka.bootstrap-servers=broker:29092
# The default topic where messages will be sent IF NOT explicitly specified
spring.kafka.template.default-topic=booking-created
# The serializers class used for serialization the key of the kafka message
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer